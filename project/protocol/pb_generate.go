package main

import (
	"errors"
	"fmt"
	"log"
	"os"
	"path/filepath"
	"regexp"
	"strings"
)

// ProtocolInfo 包含协议名称和ID
type ProtocolInfo struct {
	Name string
	ID   string
	Req  string
	Res  string
}

func main() {
	// 扫描proto目录，收集ProtocolId枚举定义
	wd, err := os.Getwd()
	if err != nil {
		log.Fatal(err)
	}
	protoDir := filepath.Join(wd, "/protocol/protobuf")
	protocols, err := scanProtocols(protoDir)
	if err != nil {
		log.Fatal(err)
	}

	// 将生成的代码写入文件
	outputDir := filepath.Join("protocol", "generate")
	if err := os.MkdirAll(outputDir, 0755); err != nil {
		log.Fatal(err)
	}

	outputFile := filepath.Join(outputDir, "handlers.go")
	if err := writeGeneratedCode(protocols, outputFile); err != nil {
		log.Fatal(err)
	}
	fmt.Println("Successfully generated protocol handlers in", outputFile)
}

// scanProtocols 扫描proto目录查找ProtocolId枚举
func scanProtocols(dir string) ([]ProtocolInfo, error) {
	var protocols []ProtocolInfo

	err := filepath.Walk(dir, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}

		if !info.IsDir() && strings.HasSuffix(info.Name(), ".proto") {
			content, err := os.ReadFile(path)
			if err != nil {
				return err
			}

			// 查找ProtocolId枚举
			enumRegex := regexp.MustCompile(`enum\s+ProtocolId\s*\{([^}]+)\}`)
			matches := enumRegex.FindStringSubmatch(string(content))
			if len(matches) < 0 {
				return errors.New("cannot find ProtocolId enum")
			}

			// 匹配enum中的各个项
			itemRegex := regexp.MustCompile(`(\w+)\s*=\s*(\d+);\s*//\s*req:\s*(\w+),\s*res:\s*(\w+)`)
			enumItems := itemRegex.FindAllStringSubmatch(matches[1], -1)

			for _, item := range enumItems {
				if len(item) < 5 { // 现在需要5个匹配项：完整匹配+4个捕获组
					continue
				}

				protocolName := fmt.Sprintf("Handler%s", item[1])
				protocolID, reqType, resType := item[2], item[3], item[4]

				// 跳过Null协议
				if protocolName == "Null" {
					continue
				}
				protocols = append(protocols, ProtocolInfo{
					Name: protocolName,
					ID:   protocolID,
					Req:  reqType,
					Res:  resType,
				})
			}
		}
		return nil
	})
	return protocols, err
}

// writeGeneratedCode 将生成的代码写入文件
func writeGeneratedCode(protocols []ProtocolInfo, outputPath string) error {
	var builder strings.Builder

	// 写入文件头
	builder.WriteString(`// Code generated by protocol/pb_generate.go; DO NOT EDIT.

package protocol

import (
	"google.golang.org/protobuf/proto"
	"server/protocol/generate/pb"
	"server/frame"
)

var CSHandlerObj *CSHandler
var CSHandlerMap map[int32]frame.HandlerFunc
`)
	builder.WriteString(`
func init()  {
	CSHandlerObj = &CSHandler{}
	CSHandlerMap = map[int32]frame.HandlerFunc{
`)

	for i, fn := range protocols {
		if i > 0 {
			builder.WriteString("\n")
		}
		builder.WriteString(fmt.Sprintf("\t\t%v : CSHandlerObj.On%v,", fn.ID, fn.Name))
	}
	builder.WriteString(`
	}
}`)
	builder.WriteString("\n")

	builder.WriteString("type CSHandler struct {")
	builder.WriteString("\n")
	for _, fn := range protocols {
		builder.WriteString(fmt.Sprintf("\t%s func(req *pb.%v) error", fn.Name, fn.Req))
		builder.WriteString("\n")
	}
	builder.WriteString("}")
	builder.WriteString("\n")

	for _, fn := range protocols {
		builder.WriteString(fmt.Sprintf(`
func (h *CSHandler) On%v(mq frame.IMsgQue, body []byte) bool {
	req := &pb.%v{}
	if err := proto.Unmarshal(body, req); err != nil {
		frame.LogError("Failed to unmarshal protoId: %v, err: %%v", err)
		return false
	}
	frame.LogDebug("Received protoId: %v, req: %%v", req.String())
	if err := h.%v(req); err != nil {
		frame.LogError("Failed to handle protoId: %v, err: %%v", err)
		return false
	}
	return true
}`, fn.Name, fn.Req, fn.ID, fn.ID, fn.Name, fn.ID))
		builder.WriteString("\n")
	}

	return os.WriteFile(outputPath, []byte(builder.String()), 0644)
}
